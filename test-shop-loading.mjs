#!/usr/bin/env node

// Test the shop loading directly to see what's happening

console.log('üß™ Testing shop loading service directly...');

try {
  // Import the service
  const { smartContractService } = await import('./src/services/smartContractLite.ts');
  
  console.log('üì¶ Service imported successfully');
  
  // Set wallet address
  const walletAddress = '0x1154dfA292A59A003ADF3a820dfc98ddbD273FeD';
  smartContractService.setWalletAddress(walletAddress);
  console.log('üîó Wallet address set:', walletAddress);
  
  // Test shop count
  console.log('\n1Ô∏è‚É£ Testing shop count...');
  const shopCount = await smartContractService.getShopCount();
  console.log(`üìä Shop count: ${shopCount}`);
  
  if (shopCount > 0) {
    // Test individual shop fetch
    console.log('\n2Ô∏è‚É£ Testing individual shop fetch...');
    const shop0 = await smartContractService.getShop(0);
    console.log('üè™ Shop 0:', shop0);
    
    // Test getShopsForInvestorDashboard
    console.log('\n3Ô∏è‚É£ Testing getShopsForInvestorDashboard...');
    const dashboardShops = await smartContractService.getShopsForInvestorDashboard();
    console.log(`üìà Dashboard shops count: ${dashboardShops.length}`);
    console.log('üìã Dashboard shops:', dashboardShops.map(shop => ({
      id: shop.id,
      name: shop.name,
      isActive: shop.isActive,
      isPlaceholder: shop.isPlaceholder
    })));
    
    if (dashboardShops.length === 0) {
      console.log('‚ùå PROBLEM: getShopsForInvestorDashboard returned empty array despite shops existing!');
    } else {
      console.log('‚úÖ SUCCESS: getShopsForInvestorDashboard returned shops');
    }
  } else {
    console.log('‚ö†Ô∏è No shops found in contract');
  }
  
} catch (error) {
  console.error('‚ùå Test failed:', error);
}
